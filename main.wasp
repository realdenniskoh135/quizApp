app QuizApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "QuizApp",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
  emailSender: {
    provider: SMTP,
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id      Int    @id @default(autoincrement())
    quizzes Quiz[]
psl=}

entity Quiz {=psl
    id        Int        @id @default(autoincrement())
    questions Question[]
    user      User       @relation(fields: [userId], references: [id])
    userId    Int
psl=}

entity Question {=psl
    id           Int      @id @default(autoincrement())
    questionText String
    options      Option[]
    quiz         Quiz     @relation(fields: [quizId], references: [id])
    quizId       Int
psl=}

entity Option {=psl
    id         Int      @id @default(autoincrement())
    optionText String
    isCorrect  Boolean  @default(false)
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int
psl=}

action createQuiz {
  fn: import { createQuiz } from "@src/actions.js",
  entities: [User, Quiz, Question, Option]
}

action submitQuiz {
  fn: import { submitQuiz } from "@src/actions.js",
  entities: [User, Quiz, Question, Option]
}

query getQuiz {
  fn: import { getQuiz } from "@src/queries.js",
  entities: [User, Quiz, Question, Option]
}

query getQuizzes {
  fn: import { getQuizzes } from "@src/queries.js",
  entities: [User, Quiz]
}

route QuizRoute { path: "/quiz/:quizId", to: QuizPage }
page QuizPage {
  component: import QuizPage from "@src/pages/Quiz.jsx",
  authRequired: true
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import DashboardPage from "@src/pages/Dashboard.jsx",
  authRequired: true
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/pages/auth.jsx",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/pages/auth.jsx",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/pages/auth.jsx",
}